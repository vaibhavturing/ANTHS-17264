version: '3.8'

services:
  # Healthcare Management API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: healthcare-management-api:latest
    container_name: healthcare-api
    restart: unless-stopped
    depends_on:
      - mongodb
      - redis
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - MONGODB_URI=mongodb://mongodb:27017/healthcare
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=1h
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - uploads:/app/uploads
    networks:
      - healthcare-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # MongoDB service
  mongodb:
    image: mongo:5.0
    container_name: healthcare-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - healthcare-network
    command: ["--auth", "--bind_ip_all"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Redis service for cache and session storage
  redis:
    image: redis:6-alpine
    container_name: healthcare-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Nginx service for load balancing and SSL termination
  nginx:
    image: nginx:alpine
    container_name: healthcare-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./public:/var/www/html
    networks:
      - healthcare-network
    depends_on:
      - api
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

volumes:
  mongodb-data:
  redis-data:
  uploads:

networks:
  healthcare-network:
    driver: bridge