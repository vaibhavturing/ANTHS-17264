# docker-compose.yml (Updated with security measures)

version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"  # Only expose locally, use reverse proxy
    environment:
      - NODE_ENV=production
      - DB_URI=${DB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      - mongo
      - postgres
    networks:
      - app-network
    # Security enhancements
    cap_drop:
      - ALL  # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Add only what's needed
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
  
  mongo:
    image: mongo:5.0
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    # No exposed ports - only accessible within Docker network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - app-network
    # Security enhancements
    command: ["--auth", "--bind_ip_all", "--tlsMode", "requireTLS", "--tlsCertificateKeyFile", "/mongo-certs/mongo.pem"]
    volumes:
      - ./mongo-certs:/mongo-certs:ro
  
  postgres:
    image: postgres:14
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    # No exposed ports - only accessible within Docker network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network
    command: >
      -c ssl=on 
      -c ssl_cert_file=/postgres-certs/server.crt 
      -c ssl_key_file=/postgres-certs/server.key

  nginx:
    image: nginx:1.21-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./public:/usr/share/nginx/html:ro
    depends_on:
      - app
    networks:
      - app-network
    # Security enhancements
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  postgres-data: