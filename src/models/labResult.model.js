const mongoose = require('mongoose');
const baseSchema = require('./baseSchema');

// Schema for reference ranges of lab tests
const referenceRangeSchema = new mongoose.Schema({
  gender: {
    type: String,
    enum: ['male', 'female', 'all'],
    default: 'all'
  },
  ageMin: {
    type: Number,
    default: 0
  },
  ageMax: {
    type: Number,
    default: 200
  },
  lowerBound: {
    type: Number,
    required: true
  },
  upperBound: {
    type: Number,
    required: true
  },
  units: {
    type: String,
    required: true
  },
  description: String
}, { _id: false });

// Schema for abnormal flags
const abnormalFlagSchema = new mongoose.Schema({
  flag: {
    type: String,
    enum: ['H', 'L', 'A', 'N', 'C'], // High, Low, Abnormal, Normal, Critical
    required: true
  },
  severity: {
    type: String,
    enum: ['mild', 'moderate', 'severe', 'critical'],
    default: 'moderate'
  },
  description: String,
  autoGenerated: {
    type: Boolean,
    default: true
  },
  reviewedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  reviewedAt: Date
}, { _id: false });

// Schema for a single lab test result
const labTestResultSchema = new mongoose.Schema({
  testCode: {
    type: String,
    required: true,
    index: true
  },
  testName: {
    type: String,
    required: true
  },
  value: {
    type: mongoose.Schema.Types.Mixed, // Can be string, number, or boolean
    required: true
  },
  units: String,
  referenceRanges: [referenceRangeSchema],
  abnormalFlags: [abnormalFlagSchema],
  notes: String,
  loincCode: String, // Standard code for lab tests
  performedBy: String,
  status: {
    type: String,
    enum: ['preliminary', 'final', 'corrected', 'canceled'],
    default: 'final'
  }
}, { _id: true });

// Main lab result schema
const labResultSchema = new mongoose.Schema({
  patient: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Patient',
    required: true,
    index: true
  },
  orderedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User', // Doctor who ordered the test
    required: true
  },
  orderDate: {
    type: Date,
    default: Date.now
  },
  collectionDate: {
    type: Date,
    required: true
  },
  reportDate: {
    type: Date,
    default: Date.now
  },
  labId: {
    type: String, // External lab identifier
    required: true,
    index: true
  },
  externalReferenceId: {
    type: String, // For labs' reference numbers
    index: true
  },
  panelCode: String, // For test panels (e.g., Lipid Panel, CBC)
  panelName: String,
  results: [labTestResultSchema], // Array of individual test results
  specimenType: String,
  specimenSource: String,
  labFacilityName: String,
  labFacilityAddress: String,
  integrationSource: {
    type: String,
    required: true,
    enum: ['manual', 'api', 'file-import', 'hl7', 'fhir'],
    default: 'manual'
  },
  rawData: {
    type: mongoose.Schema.Types.Mixed, // Store raw data from external source
    select: false // Not included in default query results
  },
  // Trend analysis data added - track changes from previous tests
  trendAnalysis: [{
    testCode: String,
    previousValue: mongoose.Schema.Types.Mixed,
    currentValue: mongoose.Schema.Types.Mixed,
    percentChange: Number,
    absoluteChange: Number,
    direction: {
      type: String,
      enum: ['increased', 'decreased', 'unchanged', 'new']
    },
    previousTestDate: Date,
    significance: {
      type: String,
      enum: ['significant-improvement', 'mild-improvement', 'unchanged', 
             'mild-deterioration', 'significant-deterioration', 'undetermined'],
      default: 'undetermined'
    }
  }],
  clinicalSignificance: {
    hasCriticalValues: {
      type: Boolean,
      default: false
    },
    hasAbnormalValues: {
      type: Boolean,
      default: false
    },
    summary: String, // Auto-generated summary of significant findings
    reviewStatus: {
      type: String,
      enum: ['pending', 'reviewed', 'action-required', 'no-action-needed'],
      default: 'pending'
    },
    reviewedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    reviewDate: Date
  },
  relatedEncounter: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Encounter'
  }
}, baseSchema.baseOptions);

// Add indexes for improved query performance
labResultSchema.index({ 'results.testCode': 1, patient: 1, collectionDate: -1 });
labResultSchema.index({ collectionDate: -1 });
labResultSchema.index({ 'clinicalSignificance.hasCriticalValues': 1 });
labResultSchema.index({ 'clinicalSignificance.hasAbnormalValues': 1 });
labResultSchema.index({ 'clinicalSignificance.reviewStatus': 1 });

// Virtual for test count
labResultSchema.virtual('testCount').get(function() {
  return this.results.length;
});

// Virtual for abnormal test count
labResultSchema.virtual('abnormalTestCount').get(function() {
  return this.results.filter(test => 
    test.abnormalFlags && test.abnormalFlags.length > 0
  ).length;
});

// Pre-save hook to update clinical significance flags
labResultSchema.pre('save', function(next) {
  // Update hasAbnormalValues and hasCriticalValues based on abnormalFlags
  this.clinicalSignificance.hasAbnormalValues = false;
  this.clinicalSignificance.hasCriticalValues = false;
  
  for (const result of this.results) {
    if (!result.abnormalFlags || !result.abnormalFlags.length) continue;
    
    this.clinicalSignificance.hasAbnormalValues = true;
    
    // Check for critical values
    if (result.abnormalFlags.some(flag => 
      flag.flag === 'C' || flag.severity === 'critical'
    )) {
      this.clinicalSignificance.hasCriticalValues = true;
      break; // Found at least one critical value
    }
  }
  
  next();
});

const LabResult = mongoose.model('LabResult', labResultSchema);

module.exports = LabResult;