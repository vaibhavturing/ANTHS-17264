const Joi = require('joi');

// Reference range schema
const referenceRangeSchema = Joi.object({
  gender: Joi.string().valid('male', 'female', 'all').default('all'),
  ageMin: Joi.number().min(0).default(0),
  ageMax: Joi.number().min(0).default(200),
  lowerBound: Joi.number().required(),
  upperBound: Joi.number().required(),
  units: Joi.string().required(),
  description: Joi.string().allow('', null)
});

// Abnormal flag schema
const abnormalFlagSchema = Joi.object({
  flag: Joi.string().valid('H', 'L', 'A', 'N', 'C').required(),
  severity: Joi.string().valid('mild', 'moderate', 'severe', 'critical').default('moderate'),
  description: Joi.string().allow('', null),
  autoGenerated: Joi.boolean().default(true),
  reviewedBy: Joi.string(),
  reviewedAt: Joi.date()
});

// Lab test result schema
const labTestResultSchema = Joi.object({
  testCode: Joi.string().required(),
  testName: Joi.string().required(),
  value: Joi.required(),
  units: Joi.string().allow('', null),
  referenceRanges: Joi.array().items(referenceRangeSchema),
  abnormalFlags: Joi.array().items(abnormalFlagSchema),
  notes: Joi.string().allow('', null),
  loincCode: Joi.string().allow('', null),
  performedBy: Joi.string().allow('', null),
  status: Joi.string().valid('preliminary', 'final', 'corrected', 'canceled').default('final')
});

// Schema for manual lab result entry
const manualLabResultSchema = Joi.object({
  collectionDate: Joi.date().required(),
  reportDate: Joi.date().default(Date.now),
  labId: Joi.string().required(),
  externalReferenceId: Joi.string().allow('', null),
  panelCode: Joi.string().allow('', null),
  panelName: Joi.string().allow('', null),
  results: Joi.array().items(labTestResultSchema).min(1).required(),
  specimenType: Joi.string().allow('', null),
  specimenSource: Joi.string().allow('', null),
  labFacilityName: Joi.string().required(),
  labFacilityAddress: Joi.string().allow('', null)
});

// Schema for import options
const importOptionsSchema = Joi.object({
  fromDate: Joi.date(),
  toDate: Joi.date(),
  allowFuzzyMatch: Joi.boolean().default(false)
});

// Schema for updating review status
const reviewStatusSchema = Joi.object({
  reviewStatus: Joi.string()
    .valid('pending', 'reviewed', 'action-required', 'no-action-needed')
    .required()
});

// Schema for lab result queries
const labResultQuerySchema = Joi.object({
  page: Joi.number().integer().min(1).default(1),
  limit: Joi.number().integer().min(1).max(100).default(20),
  startDate: Joi.date(),
  endDate: Joi.date(),
  testCode: Joi.string(),
  abnormalOnly: Joi.boolean().default(false),
  criticalOnly: Joi.boolean().default(false),
  populate: Joi.boolean().default(false)
});

// Schema for test history queries
const testHistoryQuerySchema = Joi.object({
  limit: Joi.number().integer().min(1).max(50).default(10),
  startDate: Joi.date(),
  endDate: Joi.date(),
  sortDirection: Joi.string().valid('asc', 'desc').default('desc')
});

module.exports = {
  manualLabResultSchema,
  importOptionsSchema,
  reviewStatusSchema,
  labResultQuerySchema,
  testHistoryQuerySchema
};